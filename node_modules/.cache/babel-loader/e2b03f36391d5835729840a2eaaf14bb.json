{"ast":null,"code":"var _jsxFileName = \"/home/trollhero/MEGAsync/Lambda/untitled/src/App.js\",\n    _s = $RefreshSig$();\n\n/**\n * Tom Bielawski\n * React.Tac.Toe game\n * 7/29/2021\n * Collaborating Dev: Jesse Johns\n * */\n//import statements\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { useState, useEffect } from \"react\";\nimport Square from \"./components/Square\";\nimport { Patterns } from \"./patterns\"; //Main App function\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //Declare initial state, init with 9 empty strings: one for each square\n  const [board, setBoard] = useState([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]); //Declare player state, init to X\n\n  const [player, setPlayer] = useState(\"O\"); //Declare result state, init with object for winner and status\n\n  const [result, setResult] = useState({\n    winner: \"Waiting for a winner\",\n    status: \"...\"\n  }); //useEffect hook() to update with every change, calls chooseWinner()\n\n  useEffect(() => {\n    //call chooseWinner\n    chooseWinner(); //call checkForATie\n\n    checkForATie(); //After setting the board above,\n    //If current player is X, Make the current player O\n\n    if (player === \"X\") {\n      setPlayer(\"O\");\n    } //Else, make the current player X\n    else {\n      setPlayer(\"X\");\n    } //dependency to prevent endless updates\n\n  }, [board]); //useEffect called after every move\n\n  useEffect(event => {\n    //Restart the game, invoke startOver()\n    if (result.state !== \"none\") {\n      startOver();\n    }\n  }, []); //Square chooser function (rename after complete), pass in square index\n\n  const chooseSquare = square => {\n    //Set the board, map over squares, find the value of each square\n    setBoard(board.map((value, index) => {\n      //If square == index, & value is empty, change square's initially empty state to current player\n      //This prevents player from choosing more than one square\n      if (index === square && value === \"\") {\n        return player;\n      } //Else return the current value\n      else {\n        return value;\n      }\n    }));\n  }; // Choose winner function, called each time a move is made.\n  // No parameters\n\n\n  const chooseWinner = () => {\n    //Loop through the patterns\n    //For each pattern in the array\n    Patterns.forEach(currentPattern => {\n      //Set the current player\n      const firstPlayer = board[currentPattern[0]]; //If firstPlayer is empty \"\", continue the game\n\n      if (firstPlayer === \"\") {\n        return;\n      } //Declare win variable, init to true\n\n\n      let foundWinningPattern = true; //Compare the patterns\n      //For each index in the current pattern\n\n      currentPattern.forEach(index => {\n        //If board at current index != firstPlayer\n        if (board[index] !== firstPlayer) {\n          //The winning pattern is false, no winner yet\n          foundWinningPattern = false;\n        }\n      }); //If the winning pattern is found\n\n      if (foundWinningPattern === true) {\n        //Declare the winner and assign to object\n        setResult({\n          winner: player,\n          status: \" is the winner!!\"\n        });\n      }\n    });\n  }; //Check for a time\n\n\n  const checkForATie = () => {\n    //Declare bool to represent a full board\n    let boardIsFilled = true; //Loop over board\n    //For each square on the board...\n\n    board.forEach(square => {\n      //if a square is empty\n      if (square === \"\") {\n        //Board is not filled\n        boardIsFilled = false;\n      }\n    }); //If there is a tie\n\n    if (boardIsFilled) {\n      //Set the result and display\n      setResult({\n        winner: \"Two losers!\",\n        status: \"It's a tie!\"\n      });\n    }\n  }; //startOver function to restart game, no params\n\n\n  const startOver = () => {\n    //return board to initial state\n    setBoard([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]); //Set player to O\n\n    setPlayer(\"O\");\n  }; //Bool to check background color\n\n\n  const backColor = true; //Return function\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \" React Tac Toe \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \" Choose a square, and let's play! \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: `Results: ${result.winner} ${result.status}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"App-logo\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: logo,\n            className: \"App-logo\",\n            alt: \"logo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(Square, {\n          value: board[0],\n          chooseSquare: () => {\n            chooseSquare(0);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Square, {\n          value: board[1],\n          chooseSquare: () => {\n            chooseSquare(1);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Square, {\n          value: board[2],\n          chooseSquare: () => {\n            chooseSquare(2);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(Square, {\n          value: board[3],\n          chooseSquare: () => {\n            chooseSquare(3);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Square, {\n          value: board[4],\n          chooseSquare: () => {\n            chooseSquare(4);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Square, {\n          value: board[5],\n          chooseSquare: () => {\n            chooseSquare(5);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(Square, {\n          value: board[6],\n          chooseSquare: () => {\n            chooseSquare(6);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Square, {\n          value: board[7],\n          chooseSquare: () => {\n            chooseSquare(7);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Square, {\n          value: board[8],\n          chooseSquare: () => {\n            chooseSquare(8);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n} //Export statement\n\n\n_s(App, \"wmiWML2kgDEDjMcZmvH3LrCPHhc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/trollhero/MEGAsync/Lambda/untitled/src/App.js"],"names":["useState","useEffect","Square","Patterns","App","board","setBoard","player","setPlayer","result","setResult","winner","status","chooseWinner","checkForATie","event","state","startOver","chooseSquare","square","map","value","index","forEach","currentPattern","firstPlayer","foundWinningPattern","boardIsFilled","backColor","logo"],"mappings":"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","sourcesContent":["/**\n * Tom Bielawski\n * React.Tac.Toe game\n * 7/29/2021\n * Collaborating Dev: Jesse Johns\n * */\n\n//import statements\nimport logo from './logo.svg';\nimport './App.css';\nimport {useState, useEffect} from \"react\";\nimport Square from \"./components/Square\";\nimport {Patterns} from \"./patterns\";\n\n\n//Main App function\nfunction App() {\n\n    //Declare initial state, init with 9 empty strings: one for each square\n    const [board, setBoard] = useState([\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",]);\n\n    //Declare player state, init to X\n    const [player, setPlayer] = useState(\"O\");\n\n    //Declare result state, init with object for winner and status\n    const [result, setResult] = useState({winner: \"Waiting for a winner\", status: \"...\" });\n\n    //useEffect hook() to update with every change, calls chooseWinner()\n    useEffect(() => {\n            //call chooseWinner\n            chooseWinner();\n            //call checkForATie\n            checkForATie();\n\n            //After setting the board above,\n            //If current player is X, Make the current player O\n            if (player === \"X\") { setPlayer(\"O\"); }\n\n            //Else, make the current player X\n            else { setPlayer(\"X\"); }\n\n        //dependency to prevent endless updates\n    }, [ board]);\n\n\n    //useEffect called after every move\n    useEffect((event) => {\n\n        //Restart the game, invoke startOver()\n        if (result.state !== \"none\") { startOver();}\n\n    }, []);\n\n    //Square chooser function (rename after complete), pass in square index\n    const chooseSquare = (square) => {\n        //Set the board, map over squares, find the value of each square\n        setBoard(board.map((value, index) => {\n            //If square == index, & value is empty, change square's initially empty state to current player\n            //This prevents player from choosing more than one square\n            if (index === square && value === \"\") {\n                return player;\n            }\n\n            //Else return the current value\n            else {return value;}\n        }));\n\n    };\n\n    // Choose winner function, called each time a move is made.\n    // No parameters\n    const chooseWinner = () => {\n        //Loop through the patterns\n        //For each pattern in the array\n        Patterns.forEach((currentPattern) => {\n            //Set the current player\n            const firstPlayer = board[currentPattern[0]];\n\n            //If firstPlayer is empty \"\", continue the game\n            if (firstPlayer === \"\") {return;}\n\n            //Declare win variable, init to true\n            let foundWinningPattern = true;\n\n            //Compare the patterns\n            //For each index in the current pattern\n            currentPattern.forEach((index) => {\n                //If board at current index != firstPlayer\n                if (board[index] !== firstPlayer) {\n                    //The winning pattern is false, no winner yet\n                    foundWinningPattern = false;\n                }\n            });\n\n            //If the winning pattern is found\n            if (foundWinningPattern === true) {\n                //Declare the winner and assign to object\n                setResult({winner: player, status: \" is the winner!!\"})\n            }\n        });\n    };\n\n    //Check for a time\n    const checkForATie = () => {\n        //Declare bool to represent a full board\n        let boardIsFilled = true;\n\n        //Loop over board\n        //For each square on the board...\n        board.forEach((square) => {\n            //if a square is empty\n            if (square === \"\") {\n                //Board is not filled\n                boardIsFilled = false;\n            }\n        });\n\n        //If there is a tie\n        if (boardIsFilled) {\n            //Set the result and display\n            setResult({winner: \"Two losers!\", status: \"It's a tie!\"});\n        }\n    };\n\n    //startOver function to restart game, no params\n    const startOver = () => {\n        //return board to initial state\n        setBoard([\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",]);\n\n        //Set player to O\n        setPlayer(\"O\");\n    };\n\n    //Bool to check background color\n    const backColor = true;\n\n    //Return function\n  return (\n    <div className=\"App\">\n\n        {/*Main div to hold the board*/}\n        <div className= \"board\" >\n\n            {/*Header */}\n            <header className=\"App-header\">\n                <h1> React Tac Toe </h1>\n                <h4> Choose a square, and let's play! </h4>\n\n                <p>{`Results: ${result.winner} ${result.status}`}</p>\n\n                {/* React Logo */}\n                <div className=\"App-logo\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                </div>\n            </header>\n\n\n            {/*Divs for each row*/}\n            <div className=\"row\">\n                {/* Render each square, pass the square's index */}\n                {/* Pass value, call chooseSquare(), pass in the called square's index */}\n                <Square value = {board[0]} chooseSquare = {() => {chooseSquare(0)}}/>\n                <Square value = {board[1]} chooseSquare = {() => {chooseSquare(1)}}/>\n                <Square value = {board[2]} chooseSquare = {() => {chooseSquare(2)}}/>\n            </div>\n\n            {/*Next row of squares*/}\n            <div className=\"row\">\n                <Square value = {board[3]} chooseSquare = {() => {chooseSquare(3)}}/>\n                <Square value = {board[4]} chooseSquare = {() => {chooseSquare(4)}}/>\n                <Square value = {board[5]} chooseSquare = {() => {chooseSquare(5)}}/>\n            </div>\n\n            {/*Next row of squares*/}\n            <div className=\"row\">\n                <Square value = {board[6]} chooseSquare = {() => {chooseSquare(6)}}/>\n                <Square value = {board[7]} chooseSquare = {() => {chooseSquare(7)}}/>\n                <Square value = {board[8]} chooseSquare = {() => {chooseSquare(8)}}/>\n            </div>\n        </div>\n    </div>\n  );\n}\n\n//Export statement\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}